<section class="section">
  <h2 class="section-title">Appendix: Detailed Security Data</h2>
  
  <div class="appendix-intro">
    <p>
      This appendix contains detailed information about all security warnings detected during the analysis period.
      The data is provided for reference and further investigation by security teams.
    </p>
  </div>
  
  <% if (data.summary.criticalWarnings > 0) { %>
    <h3 class="appendix-section-title">Critical Warnings</h3>
    <div class="table-container">
      <table class="data-table">
        <thead>
          <tr>
            <th>User</th>
            <th>Date/Time</th>
            <th>Event Type</th>
            <th>Warning</th>
          </tr>
        </thead>
        <tbody>
          <% 
            // Collect all critical warnings across users
            const criticalWarnings = [];
            data.users.forEach(user => {
              user.warnings
                .filter(warning => warning.severity === 'critical')
                .forEach(warning => {
                  criticalWarnings.push({
                    username: user.username,
                    ...warning
                  });
                });
            });
            
            // Sort by date (most recent first)
            criticalWarnings.sort((a, b) => {
              const dateA = new Date(a.date);
              const dateB = new Date(b.date);
              return dateB - dateA;
            });
            
            criticalWarnings.forEach(warning => {
          %>
            <tr>
              <td><%= warning.username %></td>
              <td><%= formatDate(warning.date, true) %></td>
              <td><%= warning.eventType %></td>
              <td><%= warning.message %></td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  <% } %>
  
  <% if (data.summary.highWarnings > 0) { %>
    <h3 class="appendix-section-title">High Severity Warnings</h3>
    <div class="table-container">
      <table class="data-table">
        <thead>
          <tr>
            <th>User</th>
            <th>Date/Time</th>
            <th>Event Type</th>
            <th>Warning</th>
          </tr>
        </thead>
        <tbody>
          <% 
            // Collect all high warnings across users
            const highWarnings = [];
            data.users.forEach(user => {
              user.warnings
                .filter(warning => warning.severity === 'high')
                .forEach(warning => {
                  highWarnings.push({
                    username: user.username,
                    ...warning
                  });
                });
            });
            
            // Sort by date (most recent first)
            highWarnings.sort((a, b) => {
              const dateA = new Date(a.date);
              const dateB = new Date(b.date);
              return dateB - dateA;
            });
            
            highWarnings.forEach(warning => {
          %>
            <tr>
              <td><%= warning.username %></td>
              <td><%= formatDate(warning.date, true) %></td>
              <td><%= warning.eventType %></td>
              <td><%= warning.message %></td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>
  <% } %>
  
  <% 
    // Get event type statistics
    const eventTypeStats = {};
    
    // Count events by type
    data.users.forEach(user => {
      user.warnings.forEach(warning => {
        const eventType = warning.eventType || 'Unknown';
        if (!eventTypeStats[eventType]) {
          eventTypeStats[eventType] = {
            count: 0,
            bySeverity: {
              critical: 0,
              high: 0,
              medium: 0,
              low: 0
            }
          };
        }
        
        eventTypeStats[eventType].count++;
        eventTypeStats[eventType].bySeverity[warning.severity]++;
      });
    });
    
    // Convert to array and sort
    const eventTypeArray = Object.entries(eventTypeStats)
      .map(([type, stats]) => ({ type, ...stats }))
      .sort((a, b) => b.count - a.count);
  %>
  
  <h3 class="appendix-section-title">Event Type Statistics</h3>
  <div class="table-container">
    <table class="data-table">
      <thead>
        <tr>
          <th>Event Type</th>
          <th>Total Count</th>
          <th>Critical</th>
          <th>High</th>
          <th>Medium</th>
          <th>Low</th>
        </tr>
      </thead>
      <tbody>
        <% eventTypeArray.forEach(stat => { %>
          <tr>
            <td><%= stat.type %></td>
            <td><%= stat.count %></td>
            <td><%= stat.bySeverity.critical %></td>
            <td><%= stat.bySeverity.high %></td>
            <td><%= stat.bySeverity.medium %></td>
            <td><%= stat.bySeverity.low %></td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>
  
  <h3 class="appendix-section-title">User Risk Summary</h3>
  <div class="table-container">
    <table class="data-table">
      <thead>
        <tr>
          <th>Username</th>
          <th>Risk Score</th>
          <th>Risk Level</th>
          <th>Critical Events</th>
          <th>High Risk Events</th>
          <th>Total Warnings</th>
          <th>Login Count</th>
          <th>Unique IPs</th>
        </tr>
      </thead>
      <tbody>
        <% 
          // Sort users by risk score (highest first)
          const sortedUsers = [...data.users].sort((a, b) => b.riskScore - a.riskScore);
          
          sortedUsers.forEach(user => {
        %>
          <tr>
            <td><%= user.username %></td>
            <td><%= user.riskScore %></td>
            <td>
              <span class="risk-badge <%= getRiskLevelClass(user.riskLevel) %>">
                <%= user.riskLevel.toUpperCase() %>
              </span>
            </td>
            <td><%= user.criticalEvents %></td>
            <td><%= user.highRiskEvents %></td>
            <td><%= user.warnings.length %></td>
            <td><%= user.loginCount %></td>
            <td><%= user.uniqueIPs %></td>
          </tr>
        <% }); %>
      </tbody>
    </table>
  </div>
  
  <div class="appendix-notes">
    <h3>Analysis Methodology Notes</h3>
    <p>
      The risk assessment in this report is based on DataDragon's multi-factor analysis of user behavior, event logs, 
      and security anomalies. Risk scores are calculated using a weighted algorithm that considers:
    </p>
    <ul>
      <li>Security event severity and frequency</li>
      <li>Login pattern anomalies</li>
      <li>IP address changes and geographic location</li>
      <li>Sensitive data access patterns</li>
      <li>API usage and automation</li>
    </ul>
    <p>
      This report was generated on <%= new Date().toLocaleDateString() %> and analyzes events within the specified time period.
    </p>
  </div>
</section>

<style>
  .appendix-intro {
    margin-bottom: 30px;
  }
  
  .appendix-section-title {
    margin-top: 40px;
  }
  
  .table-container {
    overflow-x: auto;
    margin-bottom: 30px;
  }
  
  .appendix-notes {
    margin-top: 40px;
    background-color: var(--background-light);
    padding: 20px;
    border-radius: 4px;
  }
  
  .appendix-notes ul {
    margin-left: 20px;
  }
  
  .appendix-notes li {
    margin-bottom: 5px;
  }
</style>

<%
function formatDate(date, includeTime = false) {
  if (!date) return 'N/A';
  
  const dateObj = new Date(date);
  if (isNaN(dateObj.getTime())) return 'Invalid Date';
  
  const options = { 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric'
  };
  
  if (includeTime) {
    options.hour = '2-digit';
    options.minute = '2-digit';
  }
  
  return dateObj.toLocaleDateString('en-US', options);
}

function getRiskLevelClass(riskLevel) {
  switch(riskLevel.toLowerCase()) {
    case 'critical': return 'risk-critical';
    case 'high': return 'risk-high';
    case 'medium': return 'risk-medium';
    case 'low': return 'risk-low';
    default: return 'risk-none';
  }
}
%> 